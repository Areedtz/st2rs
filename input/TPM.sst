Problem: DigitalEnvelopeWithTPM;
Principals: Alice, Parent, TPM;
Knowledge: tpmsk:skey@TPM,
           tpmpk:pkey@Alice = pk(tpmsk),
           tpmpk:pkey@Parent = pk(tpmsk);
Types: pkey, skey, symkey, bytes;
Functions: pk(skey) -> pkey,
           sign(bytes, skey) -> bytes,
           checksign(bytes, pkey) -> bytes,
           aenc(bytes, pkey) -> bytes,
           adec(bytes, skey) -> bytes,
           senc(bytes, symkey) -> bytes,
           sdec(bytes, symkey) -> bytes,
           hash(bytes, bytes) -> bytes,
           genkey(skey, bytes) -> skey, # Is the order here correct?
           symkeywrapper(symkey) -> bytes,
           symkeyunwrapper(bytes) -> symkey,
           bytesbyteswrapper(bytes, bytes) -> bytes,
           bytesbytesunwrapper(bytes) -> <bytes, bytes>,
           pkeybyteswrapper(pkey, bytes) -> bytes,
           pkeybytesunwrapper(bytes) -> <pkey, bytes>,
           OBT() -> bytes,
           REF() -> bytes;
Equations: checksign(sign(m, k), pk(k)) = m,
           adec(aenc(m, pk(k)), k) = m,
           sdec(senc(m, k), k) = m,
           symkeyunwrapper(symkeywrapper(k)) = k,
           bytesbytesunwrapper(bytesbyteswrapper(b1, b2)) = <b1, b2>,
           pkeybytesunwrapper(pkeybyteswrapper(k, b)) = <k, b>;
Events:  revealed(bytes),
         not_revealed(bytes);
Queries: event(revealed(secr)), 
         event(not_revealed(secr)),
         (event(not_revealed(secr)) & event(revealed(secr)));
Protocol:
TPM {
    new pcr: bytes;
}
TPM -> Alice: pcr = pcr # We assume anyone knows the initial pcr state
Alice {
    new na: bytes;
    new sesk_a: symkey;
}
Alice -> TPM: enc_sesk_a = aenc(symkeywrapper(sesk_a), tpmpk)
TPM {
    let sesk_a = symkeyunwrapper(adec(enc_sesk_a, tpmsk));
    new sesid_a: bytes;
}
TPM -> Alice: sesid_a = sesid_a
Alice -> TPM: n_sesid_a = senc(bytesbyteswrapper(na, sesid_a), sesk_a)
TPM {
    let <na: bytes, %sesid_a> = bytesbytesunwrapper(sdec(n_sesid_a, sesk_a));
    let pcr = hash(na, pcr);
}
Alice {
    let h_obt = hash(OBT(), hash(na, pcr));
}
Alice -> TPM: h_obt = h_obt
TPM -> Alice: sign_obtk = sign(pkeybyteswrapper(pk(genkey(tpmsk, h_obt)), h_obt), tpmsk)
Alice {
    let <obtk: pkey, %h_obt> = pkeybytesunwrapper(checksign(sign_obtk, tpmpk));
    new secr: bytes;
}
Alice -> Parent: envlp = aenc(secr, obtk)
Parent {
    new sesk_p: symkey;
}
Parent -> TPM: enc_sesk_p = aenc(symkeywrapper(sesk_p), tpmpk)
TPM {
    new sesid_a: bytes;
}
TPM -> Parent: sesid_a = sesid_a
TPM -> Parent {
    Refuse:
        TPM {
            let pcr = hash(REF(), pcr);
        }
        Parent -> TPM: envlp = envlp
        TPM -> Parent: quote = sign(bytesbyteswrapper(pcr, envlp), tpmsk)
        TPM {
            event not_revealed(adec(envlp, genkey(tpmsk, pcr)));
        }
        end
    Obtain:
        TPM {
            let pcr = hash(OBT(), pcr);
        }
        Parent -> TPM: envlp = envlp
        TPM *->* Parent: secr = adec(envlp, genkey(tpmsk, pcr))
        TPM {
            event revealed(adec(envlp, genkey(tpmsk, pcr)));
        }
        end
}